# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1175lekpJ6KV9dsBtKpFhSaWbTPhOyNLA
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
data = pd.read_csv('emails.csv')

# Explore the dataset
print(data.head())
print(data.info())
print(data['spam'].value_counts())

# Preprocessing: Remove duplicates
data.drop_duplicates(inplace=True)

# Preprocessing: Handle missing values if any
data.dropna(inplace=True)

# Preprocessing: Convert 'spam' column to binary (1 for spam, 0 for not spam)
data['spam'] = data['spam'].map({'ham': 0, 'spam': 1})

# Visualize the distribution of spam vs. not spam emails
sns.countplot(data['spam'])
plt.xlabel('Spam (1) vs. Not Spam (0)')
plt.show()

# Feature Engineering: Convert email text to numerical features
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['text'])

# Apply TF-IDF transformation to the features
tfidf_transformer = TfidfTransformer()
X_tfidf = tfidf_transformer.fit_transform(X)

# Target variable
y = data['spam']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

# Model training and evaluation
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train, y_train)

# Predict on the test set
y_pred = nb_classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print("Accuracy:", accuracy)
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Visualizing the confusion matrix
plt.figure(figsize=(6, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['Not Spam', 'Spam'], yticklabels=['Not Spam', 'Spam'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()